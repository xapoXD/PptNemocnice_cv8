@inject NavigationManager UriHelper

@inject HttpClient Http


@if (Item == null) return;
@if (Item != null && !Item.IsInEditMode)
{
    <tr class="@(Item.NeedsRevision?"bg-red-300":"")">
        <td>@Item.Name </td>
        <td>@Item.BoughtDateTime.ToString("yyyy-MM-dd") </td>
        
        @if(Item.LastRevision == null)
        {
            <td>@("Neexistující revize")</td>
        }  else {

            <td>@Item.LastRevision </td>
        }

        <td>@(Item.NeedsRevision?"Ano":"Ne") </td>
        <td>@Item.PriceCzk </td>

        <td class="flex gap-1">
            <button @onclick="() => DeleteItemCallback.InvokeAsync()" class="bg-red-400 twbtn">X</button>

            <button @onclick="() => Revize()" class="bg-blue-400 twbtn">Provést revizi</button>

            <button @onclick="() => TurnOnEdit()" class="twbtn bg-amber-300">✏️</button>  

            <button  @onclick="() => Ukon(Item.Id)" class="bg-green-400 twbtn">Úkony</button> 

            <button @onclick="() => Detail(Item.Id)" class="oi oi-arrow-thick-right">Detail</button>
            

        </td>
    </tr>
}
else if(editingItem != null && editingItem.IsInEditMode)
{
    <tr class="px-2 py-1 border-2 border-slate-600">
        <td colspan="6">
           <EditForm Model=editingItem OnValidSubmit="() => TurnOffEdit(true)">
            <DataAnnotationsValidator />
          @*<ValidationSummary />*@
            <table>
                <tr>
                    <td><InputText class="border-2 border-slate-300" @bind-Value=@editingItem.Name />
                    <ValidationMessage For="() => editingItem.Name"/>    
                    </td>
                        <td> <InputDate class="border-2 border-slate-300" @bind-Value=@editingItem.BoughtDateTime /> </td>
                        <td> <InputDate class="border-2 border-slate-300" @bind-Value=@editingItem.LastRevision /></td>
                        <td>@(editingItem.NeedsRevision?"Ano":"Ne") </td>
                        <td> <InputNumber class="border-2 border-slate-300" @bind-Value=@editingItem.PriceCzk />
                    <ValidationMessage For="() => editingItem.PriceCzk"/>    
                            
                        </td>
                       

                        <td class="flex gap-1">
                            @if (ChildContent == null)
                            {

                                <button class="border-[1px] border-amber-600 rounded-sm text-sm px-2 py-1">Ok</button>
                                <button @onclick="()=> TurnOffEdit(false)" type="button" class="border-[1px] border-amber-600 rounded-sm text-sm px-2 py-1">Zruš</button>
                            }
                            else
                            {
                                @ChildContent
                            }
                        </td>
                    </tr>
                </table>
            </EditForm>
        </td>
    </tr>

} 


@code {
    VybaveniModel? editingItem;
    VybaveniModel? _Item;
    [Parameter]
    public VybaveniModel? Item
    {
        get => _Item;
        set
        {
            _Item = value;
            if (value != null && value.IsInEditMode)
                TurnOnEdit();
        }
    }

    private void TurnOnEdit()
    {
        if (Item != null)
        {
            Item.IsInEditMode = true;
            editingItem = Item.Copy();
        }
    }

    private void TurnOffEdit(bool success)
    {
        if (success)
        {
            editingItem?.MapTo(Item);
        }
        if (Item is not null)
            Item.IsInEditMode = false;
        editingItem = null;
        EditDoneCallback.InvokeAsync(success);
    }

    
    private void Ukon(Guid args)
    {
        UriHelper.NavigateTo("ukon/" + args);
    }


    // update revize
    async Task Revize()
    {
     /*   item.LastRevision = DateTime.Now; 
        var resp = await Http.PostAsJsonAsync("revize", item); */

        RevizeModel novaRevize = new() { Nazev = "Nova revize", VybaveniId= Item!.Id, DateTime = DateTime.Now};
        var resp = await Http.PostAsJsonAsync("revize", novaRevize);
        if (!resp.IsSuccessStatusCode) return;

      //  novaRevize.Id = await resp.Content.ReadFromJsonAsync<Guid>();
        Item.LastRevision = novaRevize.DateTime;
    }


    private void Detail(Guid args)
    {
        UriHelper.NavigateTo("vybaveni/" + args);
    }
       
    


        

    [Parameter] public EventCallback DeleteItemCallback { get; set; }
    [Parameter] public EventCallback<bool> EditDoneCallback { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

   

}
