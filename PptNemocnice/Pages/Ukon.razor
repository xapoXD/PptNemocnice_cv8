@page "/ukon/{Id:guid}"
@inject HttpClient Http

@if (item == null)
{
     <Loader/>
    return;
}

<h1>Úkony pro vybavení: @item.Nazev</h1>

@if (!isInNewMode)
{
    <button @onclick="@(() => {isInNewMode = true; newEntity = new() { IsInNewMode = true, Name="nazev ukonu" }; })" class="twbtn bg-green-500 my-2">
        Přidej nový záznam
    </button>
}

@if (!isInEditMode)
{
        <button  class="twbtn bg-amber-500 my-2 flex gap-5" @onclick="() => EditMod()" >✏️</button> 
}else
{ 
    <button type="button" @onclick="() => isInEditMode = false" class="twbtn bg-red-500">Zrušit</button> 
}



<table class="w-full">

    <thead class="border-b-2 border-slate-500">
        <tr>
            <th>Název</th>
            <th>Datum a čas</th>
            <th>Pacient: Jméno</th>
            <th>Pacient: Příjmení</th>
            <th class="flex gap-3">Id</th>
        </tr>
    </thead>

  @if(seznamUkonu != null){
     @foreach(var rev in seznamUkonu)
        {
             @if(rev.Name != null )
            {
                Zaloha = rev.VybaveniId;
                    edit = rev;
            }

         
        if (isInEditMode && edit != null)
        {
        <tr class="px-2 py-1 border-2 border-slate-600">
            <td colspan="6">

                <EditForm Model=rev OnValidSubmit="() => isInEditMode = false">
                    <DataAnnotationsValidator />

                    @*<ValidationSummary />*@
                    <table>
                        <tr>
                            <td>
                                <InputText class="border-2 border-slate-300" @bind-Value=@rev.Name>
                                </InputText>   
                            </td>
                            <td>  <InputDate class="border-2 border-slate-300" @bind-Value=@rev.UkonDateTime>
                                </InputDate> 
                            </td>

                            <td> 
                                <InputText class="border-2 border-slate-300" @bind-Value=@rev.JmenoPacient>
                                </InputText> 
                            </td>

                            <td> <InputText class="border-2 border-slate-300" @bind-Value=@rev.PrijmeniPacient>
                                </InputText>     

                            </td>
                                     <td class="flex gap-1">

                                <button type="button" @onclick="() => UpdateEntity(rev)" class="bg-green-500 twbtn">OK</button>

                            </td>
                        </tr>
                    </table>

                </EditForm>

            </td>
        </tr>

            }else {

                <tr>
            <th> @rev.Name </th>
                
            <th> @rev.UkonDateTime.ToString("yyyy-MM-dd HH:mm:ss") </th>

            <th> @rev.JmenoPacient </th>

            <th> @rev.PrijmeniPacient </th>

            <th class="flex gap-1">
            <button  class="bg-red-400 twbtn" @onclick="() => DeleteUkon(rev)">X</button>
            
            </th>
            
            <th> @rev.Id</th>

           
         </tr>


            }


   }
  }


        


    @if (isInNewMode && newEntity != null)
    {
        <tr class="px-2 py-1 border-2 border-slate-600">
            <td colspan="6">

                <EditForm Model=newEntity OnValidSubmit="() => isInNewMode = false">
                    <DataAnnotationsValidator />

                    @*<ValidationSummary />*@
                    <table>
                        <tr>
                            <td>
                                <InputText class="border-2 border-slate-300" @bind-Value=@newEntity.Name>
                                </InputText>   
                            </td>
                            <td>  <InputDate class="border-2 border-slate-300" @bind-Value=@newEntity.UkonDateTime>
                                </InputDate> 
                            </td>

                            <td> 
                                <InputText class="border-2 border-slate-300" @bind-Value=@newEntity.JmenoPacient>
                                </InputText> 
                            </td>

                            <td> <InputText class="border-2 border-slate-300" @bind-Value=@newEntity.PrijmeniPacient>
                                </InputText>     

                            </td>

                            <td class="flex gap-1">

                                <button @onclick="() => AddEntity(newEntity)" class="bg-green-500 twbtn">Přidej</button>

                                <button type="button" @onclick="() => isInNewMode = false" class="twbtn bg-red-500">Zrušit</button>

                            </td>
                        </tr>
                    </table>

                </EditForm>

            </td>
        </tr>

    }

         

</table>


@code {

    bool isInNewMode;

    bool isInEditMode;
    UkonModel? newEntity;
    //    UkonModel _Item;

    UkonModel? edit;

    Guid Zaloha;

    [Parameter] public Guid Id { get; set; }

    VybaveniSRevizemaModel? item;

    List<UkonModel>? seznamUkonu;


    protected override async Task OnInitializedAsync()
    {
        item = await Http.GetFromJsonAsync<VybaveniSRevizemaModel>($"ukon/{Id}");

        seznamUkonu = item?.Ukons;

    }


    async Task AddEntity(UkonModel item)
    {
        item.VybaveniId = Zaloha;

        var resp = await Http.PostAsJsonAsync("ukon", item);
        if (!resp.IsSuccessStatusCode) return;

        item.Id = await resp.Content.ReadFromJsonAsync<Guid>();
        seznamUkonu?.Insert(0, item);   
    }



    async Task DeleteUkon(UkonModel item)
    {
        var resp = await Http.DeleteAsync($"ukon/{item.Id}");

        if (resp.IsSuccessStatusCode)
            seznamUkonu?.Remove(item);
    }


    async Task UpdateEntity(UkonModel item)
    {
        isInEditMode = false;
        var resp = await Http.PutAsJsonAsync("ukon", item);
    }


    public void EditMod ()
    {
        isInEditMode = true;

    }
}
